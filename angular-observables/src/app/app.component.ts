import { AfterViewInit, Component, ElementRef, ViewChild } from '@angular/core';
import { fromEvent, interval, Observable } from 'rxjs';
import { filter, map, tap } from 'rxjs/operators';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements AfterViewInit {  // Components implementing the AfterViewInit interface must declare ngAfterViewInit() method instead of ngOnInit()

  @ViewChild('button') button!: ElementRef<HTMLButtonElement>;

  interval$ = interval(1000)  // Creates an Observable with autogenerated sequential int values every 1000ms (1s). It is a good practice and a convention to mark Observales variables with $ at the end!
    .pipe(  // A pipe of the observable contains operators for manipulation of the Observable
      map(count => count * 6),  // Operator turns every generated value from a 360* to a 60Sec unit to imitate a seconds arrow. != .map() method for JS-arrays! Even if the Ovbservable<Var[]> is of an array type
      tap(degrees => console.log('Observable generates interval value: ', degrees)),  // Operator inserts code lines between other pipe options
      filter(degrees => degrees % 10 === 0)  // Operator filters the output values that the subscribed to Observable will return. Here it displays only values dividable by 10
      // Other Operators are available here: @ https://www.learnrxjs.io/learn-rxjs/operators
    );
  // The Observable is not subscribed here directly, it is subscribed using the async pipe in the components view instead! Benefit: Angular takes care of the "leaking", closing the Observable automatically once the View get closed / switched

  values: (string | number)[] = [];

  ngAfterViewInit(): void {
    /* ngAfterViewInit is an analog of the ngOnInit() method of standard components for components implementing the AfterViewInit interface. The logic in this method is executed AFTER the View was generated.  */

    fromEvent(this.button.nativeElement, 'click')  // Creates an observale for a specific target and an event
      .subscribe(  // Observables are lazy: Without subscription they are not starting their execution!
        event => this.values.push("Added a click notion!")
      );
  };

}
